(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    135952,       2759]
NotebookOptionsPosition[    131013,       2688]
NotebookOutlinePosition[    131728,       2710]
CellTagsIndexPosition[    131685,       2707]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[StyleBox["CMSC 641 Design and Analysis of Algorithms - Special \
Assignment 1\n\nGroup Members: Supriya  Mokashi,\n\t\t\t     Pramod \
Kadagattor, ",
 FontFamily->"Times New Roman",
 FontSize->18,
 FontWeight->"Bold",
 FontColor->GrayLevel[0]]], "Text",
 CellChangeTimes->{{3.7912642242452564`*^9, 
  3.7912642843737235`*^9}},ExpressionUUID->"b9d980c7-b433-4aab-9814-\
724bc0a6630f"],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{
  3.791264289935565*^9},ExpressionUUID->"d3d0a96c-c9a3-4f62-a5c2-\
d19ba92b72cd"],

Cell[TextData[StyleBox["1. Algorithm : Iterative Binary Search",
 FontFamily->"Times New Roman",
 FontSize->24,
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{
  3.7912613594849267`*^9},ExpressionUUID->"23d45cb7-e859-4b07-8347-\
ea828e299056"],

Cell[TextData[{
 "\t",
 StyleBox["1.1 Overview and pseudocode",
  FontFamily->"Times New Roman",
  FontSize->18,
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.791261388776103*^9, 
  3.7912613960899873`*^9}},ExpressionUUID->"4c0ddb66-c5fa-448f-b175-\
bca1c76350a0"],

Cell[TextData[{
 "\t\t",
 StyleBox["Binary Search is an algorithm to find an element from a sorted \
data set.  The algorithm divides the data set into two equal halves and \
checks the middle data element of the set for the required value.  If the \
middle element is the required value the algorithm returns the position of \
the middle element from the data set.  The algorithm chooses one half of the \
array based on the middle element and continues to split the data set into \
smaller halves till the middle element matches the required value or the data \
set is exhausted by the algorithm. \nThis algorithm uses a iterative method \
to implement the binary search algorithm.",
  FontFamily->"Times New Roman"]
}], "Text",
 CellChangeTimes->{{3.7912614043078623`*^9, 
  3.7912614471662407`*^9}},ExpressionUUID->"73ff38c9-cf23-4c60-9417-\
f8596872b23d"],

Cell["\<\
Pseudo Code: BinarySearch[x_List,val_]:= 
\t\t\t\tModule[{lo=1,hi=Length@x,mid},
\t\t\t\t\tWhile[lo<=hi,
\t\t\t\t\t\tmid=lo+Floor[((hi-lo)/2)];
\t\t\t\t\t\tWhich[x[[mid]]>val,hi=mid-1,
\t\t\t\t\t\tx[[mid]]<val,lo=mid+1,
\t\t\t\t\t\tTrue,Return[mid]
\t\t\t\t\t\t];
\t\t\t\t\t];
\t\t\t\t\tReturn[-1];
\t\t\t\t]
\t\t\t  a = RandomSample[Range[100],20]
\t\t      value=RandomChoice[a]
\t\t\t  a=Sort[a]
\t\t\t  Print[BinarySearch[a,value]]\
\>", "ExternalLanguage",
 CellChangeTimes->{{3.7912614586491747`*^9, 
  3.7912615078691025`*^9}},ExpressionUUID->"6c5d8ba0-f5af-4eb8-b1e6-\
c8c1b8c3b206"],

Cell[TextData[{
 "\t",
 StyleBox["1.2 Initial steps toward analysis of worst-case running time",
  FontFamily->"Times New Roman",
  FontSize->18,
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.791261616489087*^9, 
  3.7912616350377107`*^9}},ExpressionUUID->"56acc8a1-9614-4bd3-b864-\
2580de2ebcd0"],

Cell[TextData[{
 "\t\t",
 StyleBox["In the binary search algorithm , after each iteration the array \
gets divided into two halves.\n\t\tFor any length \[OpenCurlyQuote]n\
\[CloseCurlyQuote] of the array, let \[OpenCurlyQuote]k\[CloseCurlyQuote] be \
the number of iterations the algorithm iterates through before termination.\n\
\t    \tThe algorithm terminates when the element is found in the array, or \
when the value of \[OpenCurlyQuote]lo\[CloseCurlyQuote] becomes greater than \
\[OpenCurlyQuote]hi\[CloseCurlyQuote].\n\t    \tThe worst case of the \
algorithm is when the element to be found does not exist in the array. In \
such situation the algorithm runs till \[OpenCurlyQuote]lo\[CloseCurlyQuote] \
becomes greater than \[OpenCurlyQuote]hi\[CloseCurlyQuote].\n\t    \t\
Considering the worst case situation, the algorithm runs at most \
\[OpenCurlyQuote]k\[CloseCurlyQuote] times, n can be written as \
\[OpenCurlyDoubleQuote]Summation of 2^i\[CloseCurlyDoubleQuote] where \
\[OpenCurlyQuote]i\[CloseCurlyQuote] ranges from 0 to \[OpenCurlyQuote]k\
\[CloseCurlyQuote].\n\t    \t\n\t    \tn = ",
  FontFamily->"Times New Roman"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "0"}], "k"], 
    SuperscriptBox["2", "i"]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->18,ExpressionUUID->"4d8217dc-4bbe-44b7-9cda-97d3450b0c47"],
 "\n\t    \t"
}], "Text",
 CellChangeTimes->{{3.791261640214011*^9, 3.7912617441652675`*^9}, {
   3.7912618093187046`*^9, 3.7912618111530714`*^9}, {3.7912619523986564`*^9, 
   3.791261973004957*^9}, {3.791262175768684*^9, 3.7912622097953734`*^9}, {
   3.791262281458991*^9, 3.7912622842948303`*^9}, 
   3.791262877171698*^9},ExpressionUUID->"d22290b2-674a-44ef-865f-\
fd3ba7b9a751"],

Cell[TextData[{
 StyleBox["\t",
  FontSize->18],
 StyleBox["1.3 Solving the key summation using Mathematica",
  FontFamily->"Times New Roman",
  FontSize->18,
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.7912618498946285`*^9, 
  3.79126187789865*^9}},ExpressionUUID->"1adf52d0-85d3-4bec-8f43-\
61abf83d92ad"],

Cell[TextData[{
 "\t\t",
 StyleBox["\tn = ",
  FontFamily->"Times New Roman"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "0"}], "k"], 
    SuperscriptBox["2", "i"]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->18,ExpressionUUID->"2cf593a4-bc7d-4cee-b2be-f767ba6122ff"]
}], "Text",
 CellChangeTimes->{{3.7912623007925453`*^9, 
  3.791262302394182*^9}},ExpressionUUID->"b298b07b-629f-4466-ae06-\
838fd5571919"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\t\t\t", 
  NamespaceBox["LinguisticAssistant",
   DynamicModuleBox[{Typeset`query$$ = "Sum[2^i, {i, 0, k}]", 
    Typeset`boxes$$ = RowBox[{"Sum", "[", 
      RowBox[{
        RowBox[{"2", "^", "i"}], ",", " ", 
        RowBox[{"{", 
          RowBox[{"i", ",", " ", "0", ",", " ", "k"}], "}"}]}], "]"}], 
    Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, 
    Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {
    "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
     0.9009326`7.406237295526119, "Messages" -> {}}}, 
    DynamicBox[ToBoxes[
      AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
       Dynamic[Typeset`query$$], 
       Dynamic[Typeset`boxes$$], 
       Dynamic[Typeset`allassumptions$$], 
       Dynamic[Typeset`assumptions$$], 
       Dynamic[Typeset`open$$], 
       Dynamic[Typeset`querystate$$]], StandardForm],
     ImageSizeCache->{180., {8., 18.}},
     TrackedSymbols:>{
      Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
       Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
    DynamicModuleValues:>{},
    UndoTrackedVariables:>{Typeset`open$$}],
   BaseStyle->{"Deploy"},
   DeleteWithContents->True,
   Editable->False,
   SelectWithContents->True]}]], "Input",
 CellChangeTimes->{{3.7912623199587526`*^9, 3.7912623442569184`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"d2e55677-aa8d-472d-8847-c8bcfe820b38"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "1"}], "+", 
  SuperscriptBox["2", 
   RowBox[{"1", "+", "k"}]]}]], "Output",
 CellChangeTimes->{{3.7912623385622463`*^9, 3.7912623479788303`*^9}},
 CellLabel->"Out[18]=",ExpressionUUID->"ce866845-1be6-44af-8934-5ee0d4f903f2"]
}, Open  ]],

Cell["", "Text",
 CellChangeTimes->{{3.7912623751089134`*^9, 3.791262431899376*^9}, {
  3.791262487193262*^9, 
  3.791262488141054*^9}},ExpressionUUID->"2db3b4e8-a797-4eda-a8b4-\
07ce061a9e61"],

Cell[TextData[{
 StyleBox["\t\tFrom the above summation : \t\t\t\tn = -1 + ",
  FontFamily->"Times New Roman"],
 Cell[BoxData[
  SuperscriptBox["2", 
   RowBox[{"1", "+", "k"}]]],
  CellChangeTimes->{{3.791257438186251*^9, 3.791257459286272*^9}, {
   3.791257853081263*^9, 3.791257955538751*^9}, {3.7912580215889783`*^9, 
   3.7912580938836045`*^9}, {3.791258154964266*^9, 3.791258157739914*^9}, {
   3.7912582026411133`*^9, 3.791258217381894*^9}, {3.7912591279862995`*^9, 
   3.7912592293819246`*^9}, {3.7912593072377615`*^9, 
   3.7912593803966513`*^9}, {3.7912603167637606`*^9, 
   3.7912603308346477`*^9}, {3.7912603992822647`*^9, 3.7912604293302803`*^9}},
  ExpressionUUID->"301f5ff0-9144-46c3-843f-20b8df08e860"],
 "\n\t        ",
 StyleBox["This implies :\t\t\t\t\t\t\t\tn + 1 = ",
  FontFamily->"Times New Roman"],
 Cell[BoxData[
  SuperscriptBox["2", 
   RowBox[{"1", "+", "k"}]]],
  CellChangeTimes->{{3.791257438186251*^9, 3.791257459286272*^9}, {
   3.791257853081263*^9, 3.791257955538751*^9}, {3.7912580215889783`*^9, 
   3.7912580938836045`*^9}, {3.791258154964266*^9, 3.791258157739914*^9}, {
   3.7912582026411133`*^9, 3.791258217381894*^9}, {3.7912591279862995`*^9, 
   3.7912592293819246`*^9}, {3.7912593072377615`*^9, 
   3.7912593803966513`*^9}, {3.7912603167637606`*^9, 
   3.7912603308346477`*^9}, {3.7912603992822647`*^9, 3.7912604293302803`*^9}},
  ExpressionUUID->"61b4f23f-6c26-4f31-a443-d773667b38f6"],
 StyleBox["\t\t\t\t\t\n\t\tApplying log on both sides we get \t\t\tLog[n+1] = \
(1+k) Log[2]\n\t\tThis implies             \t\t\t\t\t\tk = Log[n+1] - 1  \n\t\
\tThe number of iterations \[OpenCurlyQuote]k\[CloseCurlyQuote] is of the \
order     O ( Log[n] )\n\t\tThis implies that at a worst case scenario the \
algorithm runs Log[n] number of times.",
  FontFamily->"Times New Roman"]
}], "Text",
 CellChangeTimes->{{3.7912625023662124`*^9, 3.79126256348552*^9}, {
  3.791262597779109*^9, 3.791262756682104*^9}, {3.791262895586327*^9, 
  3.7912629062721*^9}},ExpressionUUID->"7aae7313-4e58-4360-8db6-d62a52d4b300"],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{
  3.791262773266265*^9},ExpressionUUID->"1da513f9-2c7b-48f0-a046-\
2efd420b0801"],

Cell[TextData[{
 "\t",
 StyleBox["1.4 Graph and conclusion",
  FontFamily->"Times New Roman",
  FontSize->18,
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.791262786767644*^9, 
  3.791262787722431*^9}},ExpressionUUID->"15022b45-5c7d-4922-8d70-\
4865010e2226"],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{
  3.7912628144135404`*^9},ExpressionUUID->"f8b0d352-5fe2-424f-ba3f-\
77e009d011d2"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Plot[Log[n]/Log[2], {n, 0, 100}]", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    InputAssumptions -> {
     "*FunClash.log-_*Log10.Log-", "*FunClash.Log-_*Log.Log10-"}, 
    Method -> {
     "ExtrusionChosen" -> {"Plot", "Plot", 1, 1, "Content"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Log[n]/Log[2], {n, 0, 100}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    FractionBox[
                    RowBox[{"log", "(", "n", ")"}], 
                    RowBox[{"log", "(", "2", ")"}]], HoldForm], 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"n", "\[LongEqual]", 
                    StyleBox[
                    TagBox["0", HoldForm], 
                    GrayLevel[0], StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox["\" to \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    TagBox["100", HoldForm]}, "RowDefault"]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Plot", "numsubpods" -> "1", 
     "position" -> "200", "scanner" -> "Plot", "title" -> "Plot"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Log[n]/Log[2], {n, 0, 100}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max3547$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min3546$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3546$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3547$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2005934$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min3546$\
2005939$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max3547$2005940$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max3547$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min3546$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2005934$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3546$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3546$\
2005939$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3547$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max3547$\
2005940$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2005916[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Log[2]^(-1) Log[Global`n], {Global`n, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3546$$], 
                    (
                    Piecewise[{{
                    50. + 53.45224838248487 Tan[1.5040801783846716` #], # < 
                    0}}, 50. + 
                    53.45224838248487 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min3546$$], 
                    0], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3546$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max3547$$]], 
                    (
                    Piecewise[{{
                    50. + 53.45224838248487 Tan[1.5040801783846716` #], # < 
                    0}}, 50. + 
                    53.45224838248487 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min3546$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max3547$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3546$$ + 
                    Rational[1, 10], 
                    CalculateUtilities`GraphicsUtilities`Private`max3547$$]], 
                    100]}, ImageSize -> {330.}, PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.6, 0.24, 0.4428931686004542], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.6, 0.5470136627990908, 0.24], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.24, 0.6, 0.33692049419863584`], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.24, 0.5939180232054561, 0.6], 
                    AbsoluteThickness[1]]}}, PerformanceGoal -> "Quality"]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min3546$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max3547$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat = 
                    Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2005916]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2005916[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    All, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines = 
                    ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 
                    Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2005916[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    All, 2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbikwfv/\
6D5B4RqODBx6QGN0YkwaUpLz3ljiJhWsH29kG/zz47CZp1q5STAdoSh9O9aX5fPfdd9d7eiyCpN/\
r9dR1Yz4IFidbeHpizEjMclHweP8sl0QpKnhyDZ/dMSYkeo8w+EFi57tpzHshZ6Dd+Q2+\
DywqGGjyVVNGNSVqeiAhz2ikas9Y0hPzkykTETD6kzwbbm+/\
ej3ccTAYyxi0JpKrnbaQeSZBkaSHQDeMeceAf3PHx+\
XxU8FYSL4XhEdEPTTeiYTYwAgODPPxvvVqM3UPE9PAY5DxpdNk5Tlqe4HSkvJ0QmY5vnExWS/\
aAoNMlePmfsnNOgW58G/hAxHamJzHJm3PlkC/MK4Yfedl9c+5G+\
D5bVt4KU5XE4f57TLkDTQ9IWqZzuet6+QYqbrWRj/\
n6rLmy0aDvHjK1P9LR1Tp5TCGbcMgs2NT49XaW4Z/2RZe5Nj1c3E/\
MOazc5SAq4ZDJbiPIi7YPIpmygMn0fbpqtw4HMbdiu8QnT4VrHACE2fZL7Y/\
HlXg9aYQYu2mG5AOr2dAQHJiXLHldo+mVI8ykBAZ4Pl1/\
bLJJqIOxePO9rWnPKZmgDlC1i1PaA6ThbqDjrIvf1TcSi7nmgx5P+\
SapESuFf1trI805PJ4IjwjCfGCpl69OaySGoP0lv2gBAlz4BQh6S/zsd/\
cw8VKIFUHEtUlHYsDW5oz/yT6ZYGPCE911tyxPUeXd9tiNoE4rVUX0CRZnDabY7rfZLpxQ3Og+\
5LgWxL/gd5tCt2m8Fc3haU9uFsTujWhWxO6NaFbE/7fNcFGjP9KvwEJBrhG"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Function", "word" -> "Log", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "Log", "desc" -> "the natural logarithm", "input" -> 
          "*FunClash.Log-_*Log.Log10-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Log10", "desc" -> "the base 10 logarithm", "input" -> 
          "*FunClash.Log-_*Log10.Log-"}, {}]}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.97", 
    "parsetiming" -> "0.685", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSP452019gi4eid2b6d2a4f00001dga6975f3fgg6gb", "host" -> 
    "https://www4c.wolframalpha.com", "server" -> "14", "related" -> 
    "https://www4c.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa452119gi4eid2b6d2a4f000041cd11ce37defe2f6539953701893298433", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2020, 2, 21, 3, 43, 47.2966226`9.427404990317983}, "Line" -> 
    27, "SessionID" -> 27329249044773993531}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Plot", "Plot", 1, 1, "Content"}, Typeset`open$$ = False, Typeset`newq$$ = 
   "Plot[Log[n]/Log[2], {n, 0, 100}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{214., {27., 18.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[27]:=",ExpressionUUID->"f9472488-b1c4-485a-8d1a-5023c7772c13"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     TagBox[
      FormBox[
       StyleBox[
        DynamicModuleBox[{
         CalculateUtilities`GraphicsUtilities`Private`max3549$$ = 0.5, 
         CalculateUtilities`GraphicsUtilities`Private`min3548$$ = -0.54, 
         CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
         Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
         Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
         Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
         Typeset`specs$$ = {{
           Hold[CalculateUtilities`GraphicsUtilities`Private`more$$], {
           False, True}}, {{
            Hold[
            CalculateUtilities`GraphicsUtilities`Private`min3548$$], -0.5, 
            "min"}, -1, 1}, {{
            Hold[CalculateUtilities`GraphicsUtilities`Private`max3549$$], 0.5,
             "max"}, -1, 1}, {
           Hold[
            Style[
             Overlay[{
               Dynamic[
                RawBoxes[
                 FEPrivate`FrontEndResource[
                 "WABitmaps", "PodInfoBackground"]]], 
               Pane[
                Column[{
                  Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
              Alignment -> {Left, Top}]]], 
           Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
         330., {101., 108.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
         Typeset`skipInitDone$$ = False, 
         CalculateUtilities`GraphicsUtilities`Private`more$2007459$$ = False, 
         CalculateUtilities`GraphicsUtilities`Private`min3548$2007460$$ = 0, 
         CalculateUtilities`GraphicsUtilities`Private`max3549$2007461$$ = 0}, 
         DynamicBox[Manipulate`ManipulateBoxes[
          2, TraditionalForm, 
           "Variables" :> {
            CalculateUtilities`GraphicsUtilities`Private`max3549$$ = 0.5, 
             CalculateUtilities`GraphicsUtilities`Private`min3548$$ = -0.5, 
             CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
           "ControllerVariables" :> {
             Hold[
             CalculateUtilities`GraphicsUtilities`Private`more$$, 
              CalculateUtilities`GraphicsUtilities`Private`more$2007459$$, 
              False], 
             Hold[
             CalculateUtilities`GraphicsUtilities`Private`min3548$$, 
              CalculateUtilities`GraphicsUtilities`Private`min3548$2007460$$, 
              0], 
             Hold[
             CalculateUtilities`GraphicsUtilities`Private`max3549$$, 
              CalculateUtilities`GraphicsUtilities`Private`max3549$2007461$$, 
              0]}, "OtherVariables" :> {
            Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
             Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
             Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
             Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> Quiet[
             Function[Null, 
              CalculateUtilities`GraphicsUtilities`Private`post$2007443[
               Plot[
                SlotSequence[1], AspectRatio -> If[
                  TrueQ[CalculateUtilities`GraphicsUtilities`Private`aspect], 
                  Automatic, 1/GoldenRatio]]], HoldAll][
             Log[2]^(-1) Log[$CellContext`n], {$CellContext`n, 
               If[
                NumericQ[
                CalculateUtilities`GraphicsUtilities`Private`min3548$$], 
                (
                Piecewise[{{
                  50. + 53.45224838248487 Tan[1.5040801783846716` #], # < 0}},
                  50. + 53.45224838248487 Tan[1.5040801783846716` #]]& )[
                CalculateUtilities`GraphicsUtilities`Private`min3548$$], 0], 
               If[
                And[
                 NumericQ[
                 CalculateUtilities`GraphicsUtilities`Private`min3548$$], 
                 NumericQ[
                 CalculateUtilities`GraphicsUtilities`Private`max3549$$]], 
                (
                Piecewise[{{
                  50. + 53.45224838248487 Tan[1.5040801783846716` #], # < 0}},
                  50. + 53.45224838248487 Tan[1.5040801783846716` #]]& )[
                 If[
                 CalculateUtilities`GraphicsUtilities`Private`min3548$$ == 
                  CalculateUtilities`GraphicsUtilities`Private`max3549$$, 
                  CalculateUtilities`GraphicsUtilities`Private`min3548$$ + 
                  Rational[1, 10], 
                  CalculateUtilities`GraphicsUtilities`Private`max3549$$]], 
                100]}, ImageSize -> {330.}, PlotStyle -> {{
                 Directive[
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]]}, {
                 Directive[
                  RGBColor[0.6, 0.24, 0.4428931686004542], 
                  AbsoluteThickness[1]]}, {
                 Directive[
                  RGBColor[0.6, 0.5470136627990908, 0.24], 
                  AbsoluteThickness[1]]}, {
                 Directive[
                  RGBColor[0.24, 0.6, 0.33692049419863584`], 
                  AbsoluteThickness[1]]}, {
                 Directive[
                  RGBColor[0.24, 0.5939180232054561, 0.6], 
                  AbsoluteThickness[1]]}}, PerformanceGoal -> "Quality"]], 
           "Specifications" :> {{
             CalculateUtilities`GraphicsUtilities`Private`more$$, {
              False, True}, ControlType -> None}, {{
              CalculateUtilities`GraphicsUtilities`Private`min3548$$, -0.5, 
               "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
              CalculateUtilities`GraphicsUtilities`Private`max3549$$, 0.5, 
               "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 2}, 
             Style[
              Overlay[{
                Dynamic[
                 RawBoxes[
                  FEPrivate`FrontEndResource[
                  "WABitmaps", "PodInfoBackground"]]], 
                Pane[
                 Column[{
                   Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                 ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
               Alignment -> {Left, Top}]]}, 
           "Options" :> {
            ControlPlacement -> Bottom, FrameMargins -> {{0, 0}, {0, 10}}, 
             Paneled -> False, AppearanceElements -> {}, 
             LabelStyle -> {"DialogStyle", FontColor -> GrayLevel[0.25]}}, 
           "DefaultOptions" :> {}],
          ImageSizeCache->{621., {135., 142.}},
          SingleEvaluation->True],
         Deinitialization:>None,
         DynamicModuleValues:>{},
         Initialization:>({
            ReleaseHold[
             Hold[CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                  Blank[]]] := 
               Module[{
                 CalculateUtilities`GraphicsUtilities`Private`res, 
                  CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                 CalculateUtilities`GraphicsUtilities`Private`res = ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                   MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                   CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                   CalculateUtilities`GraphicsUtilities`Private`res]]; 
              Options[CalculateUtilities`GraphicsUtilities`Private`post$\
2007443] = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
              CalculateUtilities`GraphicsUtilities`Private`post$2007443[
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                  Blank[Graphics]], 
                 OptionsPattern[]] := Check[
                 
                 Module[{
                  CalculateUtilities`GraphicsUtilities`Private`lines, 
                   CalculateUtilities`GraphicsUtilities`Private`pts, 
                   CalculateUtilities`GraphicsUtilities`Private`gg, 
                   CalculateUtilities`GraphicsUtilities`Private`type, 
                   CalculateUtilities`GraphicsUtilities`Private`b, 
                   CalculateUtilities`GraphicsUtilities`Private`l, 
                   CalculateUtilities`GraphicsUtilities`Private`t, 
                   CalculateUtilities`GraphicsUtilities`Private`r, 
                   CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                   CalculateUtilities`GraphicsUtilities`Private`range, 
                   CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                   CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                   CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                   OptionValue["Nearest"]}, 
                  CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                   Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                  If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                  If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; 
                    CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[CalculateUtilities`GraphicsUtilities`Private`pt, 1, 
                    1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
              CalculateUtilities`GraphicsUtilities`Private`post$2007443[
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                  Blank[]], 
                 BlankNullSequence[]] := 
               CalculateUtilities`GraphicsUtilities`Private`g; 
              CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                   BlankSequence[Line]]}] := 
               Module[{
                 CalculateUtilities`GraphicsUtilities`Private`ordered, 
                  CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                 CalculateUtilities`GraphicsUtilities`Private`ordered = 
                  Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                   Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                   Return[False]]; 
                 CalculateUtilities`GraphicsUtilities`Private`intervals = 
                  Part[{CalculateUtilities`GraphicsUtilities`Private`l}, All, 
                    1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                  Length[
                   CalculateUtilities`GraphicsUtilities`Private`intervals]]; 
              CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                 Alternatives[Automatic, FrameTicks]] = {
                Identity, Identity, Identity, Identity}; 
              CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                   Blank[]], 
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                   Blank[]], 
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                   Blank[]], 
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                   Blank[]]}] := 
               Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {
                 CalculateUtilities`GraphicsUtilities`Private`b, 
                  CalculateUtilities`GraphicsUtilities`Private`l, 
                  CalculateUtilities`GraphicsUtilities`Private`t, 
                  CalculateUtilities`GraphicsUtilities`Private`r}]; 
              CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                   Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                   Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                   Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                   Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
               Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {
                 CalculateUtilities`GraphicsUtilities`Private`b, 
                  CalculateUtilities`GraphicsUtilities`Private`l, 
                  CalculateUtilities`GraphicsUtilities`Private`t, 
                  CalculateUtilities`GraphicsUtilities`Private`r}]; 
              CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                 Blank[]] = {None, None, None, None}; 
              CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                 Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
              CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                   Blank[]], 
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                   Blank[]]}] := 
               Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {
                 CalculateUtilities`GraphicsUtilities`Private`h, 
                  CalculateUtilities`GraphicsUtilities`Private`v}]; 
              CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                 Blank[]] = {None, None}; 
              CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                  Blank[]]] := ReplaceAll[
                 ReplaceAll[
                  Part[
                   DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                   Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                  CalculateUtilities`GraphicsUtilities`Private`b^
                   CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                 Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
              CalculateUtilities`GraphicsUtilities`Private`TicksToFunction[
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                  Blank[]]] := 
               CalculateUtilities`GraphicsUtilities`Private`iTicksToFunction[
                 CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                 CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
              CalculateUtilities`GraphicsUtilities`Private`TicksToFunction[
                None] = None; 
              CalculateUtilities`GraphicsUtilities`Private`TicksToFunction[
                False] = None; 
              CalculateUtilities`GraphicsUtilities`Private`TicksToFunction[
                True] = None; 
              CalculateUtilities`GraphicsUtilities`Private`TicksToFunction[
                Automatic] = Identity; 
              CalculateUtilities`GraphicsUtilities`Private`TicksToFunction[
                All] = Identity; 
              CalculateUtilities`GraphicsUtilities`Private`iTicksToFunction[
                Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                   Blank[]] -> 
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                   Blank[]]] := Replace[
                 
                 CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                   Except[None]] :> 
                 Composition[
                  CalculateUtilities`GraphicsUtilities`Private`func, 
                   CalculateUtilities`GraphicsUtilities`Private`f]]; 
              CalculateUtilities`GraphicsUtilities`Private`iTicksToFunction[{}\
] = None; CalculateUtilities`GraphicsUtilities`Private`iTicksToFunction[
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`ticks, {
                   Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                 Quiet[
                  MatchQ[
                   Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                 Apply[And, 
                  StringMatchQ[
                   Part[
                   CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                 CalculateUtilities`GraphicsUtilities`Private`iTicksToFunction[
                  Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
              CalculateUtilities`GraphicsUtilities`Private`iTicksToFunction[
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`ticks, {
                   Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                 MatchQ[
                  Apply[
                  Equal, CalculateUtilities`GraphicsUtilities`Private`ticks, {
                   1}], {
                   Repeated[True]}], Identity, 
                 MatchQ[
                  
                  Apply[# == Log[#2]& , 
                   CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                   Repeated[True]}], Exp, 
                 TrueQ[
                  Quiet[
                   Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                 
                 With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                   Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                  SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                   Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 1,
                     2], 3]& ], True, None]; 
              CalculateUtilities`GraphicsUtilities`Private`iTicksToFunction[
                 Blank[]] = None; 
              CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                  Blank[]], 
                 BlankNullSequence[]] := 
               CalculateUtilities`GraphicsUtilities`Private`type; 
              CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                   Blank[]], 
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                   Blank[]]}, 
                 Blank[]] := 
               With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                  CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                  CalculateUtilities`GraphicsUtilities`Private`acc = Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                 CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                  CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
              CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                   Blank[]], 
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                   Blank[]]}, 
                 Blank[]] := 
               With[{CalculateUtilities`GraphicsUtilities`Private`prec = Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                  RawBoxes[
                   ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
              CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                   Blank[]], 
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                   Blank[]]}, 
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                  Blank[]]] := 
               Module[{
                 CalculateUtilities`GraphicsUtilities`Private`dates, 
                  CalculateUtilities`GraphicsUtilities`Private`spec}, 
                 CalculateUtilities`GraphicsUtilities`Private`dates = 
                  Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                 CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                 If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                   CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                 With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                   DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
              CalculateUtilities`GraphicsUtilities`Private`numberForm = 
               Function[{
                 CalculateUtilities`GraphicsUtilities`Private`a, 
                  CalculateUtilities`GraphicsUtilities`Private`acc}, 
                 Quiet[
                  RawBoxes[
                   ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
            ReleaseHold[
             Uncompress[
             "6:eJztVm1v0zAQbikw3t/+ARKf0RiV4AsSoxtj0oCSlO/\
1kkti4drBdrbBnwef3STN2lWK6QBN6YdTfWke3z333PWeHosg6fd6PXXdmA+\
CxckWnp4YMxKzXBQ83j/LJShFBU+u4bM7xoSg94CRHxA7301j3gs5I9qd3+D7hEUFIxq+\
asqopqCmB5LkGY1U7RlLemJ+MmUiIoz+\
hGc729uvhsPXDgZjGROtQXL1si1knkmiIOkh0A1j3jHCv7nj4/L4qWAshO8F8AjUQ+\
OdSBIbGMEJw3y8b73aTN3DxDThMZHxpdNk5Tlqe4HSkvJ0ArMc37iYrBdtgYlMlePmfsnNOgW58G/\
hAxHamJzHJm3PlkC/MK4Yfedl9c+5G+D5bVt4KU5XE4f57TLkjWh6AmqZzuet6+QYqbrWRj/\
n6rLmy0aDvHjK1P9LR1Tp5TB22oYBs2NT49XaW4YftoUXOXb9XNwPjPnsHCXgquFQCe6jiAs2j6KZ8\
sBJtH26KjcOh3G34jtEp08FK5zAxFn2i+\
2PRxV4vSmEWLvpBqTD6xkQQA7GFVtu92hK9SgjkkQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmsNk\
oe5ER9mXPypuJZdzTYa8H3INKci1or+\
N9ZGGXB5PhGckIV7Q1Ks3h1VSYyK9ZT8oQcKccIqQ9Jf52G/\
u4WIlkKoDieqSjsWBLc2ZfxL9ssBHwFOdNXdsz9Hl3baYTSBOa9UFNEkWp83mmO43mW7c0BzoviT4l\
sR/oHebQrcp/NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb/ARuGY="]]}; 
          Typeset`initDone$$ = True),
         SynchronousInitialization->True,
         UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
         UnsavedVariables:>{Typeset`initDone$$},
         UntrackedVariables:>{Typeset`size$$}], "Manipulate",
        Deployed->True,
        StripOnInput->False],
       TraditionalForm],
      Manipulate`InterpretManipulate[1]],
     TraditionalForm], "Output",
    CellSize->{550, Automatic},
    AutoStyleOptions->{"HighlightFormattingErrors"->False},
    ScriptLevel->0,
    NumberPoint->".",
    RenderingOptions->{"3DRenderingMethod"->"BSPTreeOrDepthBuffer"},
    FontFamily->"Times",
    FontSize->14,
    Background->None,
    GraphicsBoxOptions->{DefaultAxesStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsAxes"],
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics"},
    DefaultFrameStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsFrame"],
    DefaultFrameTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"],
    DefaultTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]},
    Graphics3DBoxOptions->{
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics3D"}}],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "Plot[Log[n]/Log[2], {n, 0, 100}]", {{"Plot", 1}, "Content"}]]], "Output",
 CellChangeTimes->{
  3.791262867298958*^9, 3.7912630186691933`*^9, 3.7912630727129593`*^9, {
   3.7912631043734407`*^9, 3.791263136860419*^9}, 3.791263370073533*^9, 
   3.7912634287683535`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"fecb72a2-37da-4951-bcba-dbe958fb42ff"]
}, Open  ]],

Cell[TextData[StyleBox["We have used the Plot function to graph the running \
for the Algorithm in question. It plots log(n) [base 2] over n from 0 to 100. \
The x-axis represents the length of the array and the y-axis represents the \
number of iterations the algorithm would take. \n\nConclusion: The binary \
search algorithm is a trivial algorithm to search for an element from a \
dataset. This is a simple algorithm which is effective when the given dataset \
is sorted. Compared to the basic linear search algorithm which has a time \
complexity of O(n), binary search algorithm cuts down the time consumption to \
O(log[n]). This algorithm uses very basic looping technique to perform the \
search operation.",
 FontFamily->"Times New Roman"]], "Text",
 CellChangeTimes->{
  3.79126338999852*^9, {3.7912634961347904`*^9, 3.791263772456603*^9}, {
   3.7912638881806736`*^9, 3.791263894105793*^9}, {3.7912640503678193`*^9, 
   3.7912640533403177`*^9}},ExpressionUUID->"cef34539-bdff-465c-8f9d-\
1eee2cd146e6"],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{{3.7912640926466784`*^9, 
  3.791264094650346*^9}},ExpressionUUID->"43a1a339-eced-434e-b808-\
67e2ea4bc634"],

Cell[TextData[StyleBox["2. Algorithm : Recursive Binary Search",
 FontFamily->"Times New Roman",
 FontSize->24,
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.791264105468195*^9, 
  3.791264113830679*^9}},ExpressionUUID->"4e675a0b-2e98-43d2-827c-\
db6d5369ba00"],

Cell[TextData[StyleBox["\t2.1 Overview and pseudocode",
 FontFamily->"Times New Roman",
 FontSize->18,
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.791264141967719*^9, 
  3.7912641458385286`*^9}},ExpressionUUID->"e3dcbdb0-9353-4f57-b4d9-\
cb111158160c"],

Cell[TextData[{
 "\t\t",
 StyleBox["The Algorithm divides a range of values from which a value is to \
be searched into 2 equal halves. It further continues to reduce the field of \
search until the desired value is found. This algorithm  uses the classic \
\[OpenCurlyQuote]Divide and Conquer\[CloseCurlyQuote] strategy. It divides \
large list into 2 sublists and then recursively runs on the sublists \
separately.",
  FontFamily->"Times New Roman"]
}], "Text",
 CellChangeTimes->{{3.791264350979127*^9, 3.7912643525495205`*^9}, 
   3.791264751907565*^9},ExpressionUUID->"13d1225c-5ee8-4532-83f2-\
83c2bfe730ff"],

Cell["\<\
Pseudo code:

RecursiveBinarySearch(Array[0,1,..n-1],v,low,high) 
{
\tinvariants:v>Array[i] for all i<low 
\t\tv<Array[i] for all i>high 
\t\tif (high<low) 
\t\t\treturn not_found
\t\tmid=(low+high)/2 
\t\tif (Array[mid]>v) 
\t\t\treturn RecursiveBinarySearch(Array,v,low,mid-1) 
\t\telse if (A[mid]<value) 
\t\t\treturn RecursiveBinarySearch(Array,v,mid+1,high) 
\t\telse 
\t\t\treturn mid
}\
\>", "ExternalLanguage",
 CellChangeTimes->{{3.791264502019715*^9, 
  3.7912645354013877`*^9}},ExpressionUUID->"71bdad79-604b-420e-82c5-\
d2d027ba8fef"],

Cell[TextData[StyleBox["\t2.2 Initial steps toward analysis of worst-case \
running time",
 FontFamily->"Times New Roman",
 FontSize->18,
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.7912645583656015`*^9, 
  3.791264564063616*^9}},ExpressionUUID->"d200de8a-cf68-4850-a7e2-\
589d6d82e038"],

Cell[TextData[{
 "\t\t",
 StyleBox["The performance of Binary Search Algorithm is quite good as it \
takes just one comparison to \tdecide and discard one of the 2 sublists.\n\t\t\
By discarding one of the 2 sublists it reduces the search space to half.\n\t\t\
For iteration 1 (it1), list(len) = n; \n\t\tFor it2, list(len) = n/2; \n\t\t\
For it3, list(len)=(n/2)/2;\n\t\tLikewise for kth iteration, list(len) = \
n/2^k and in worst case the length of sublist = 1. \n\t\tHence, 1=n/2^k \
\[Rule] n=2^k \[Rule] k= log (n).",
  FontFamily->"Times New Roman"]
}], "Text",
 CellChangeTimes->{{3.7912645816424713`*^9, 3.7912646564766254`*^9}, 
   3.7912647446261473`*^9},ExpressionUUID->"7860d2a4-6452-4021-84e0-\
61ce55923d2e"],

Cell[BoxData[
 RowBox[{"\t\t", 
  RowBox[{
   NamespaceBox["LinguisticAssistant",
    DynamicModuleBox[{Typeset`query$$ = "t[n_]  :=  t[n]  =  t[n/2] +1;", 
     Typeset`boxes$$ = RowBox[{
       RowBox[{"t", "[", "n_", "]"}], " ", "==", " ", 
       RowBox[{"(", 
         RowBox[{
           RowBox[{"t", "[", "n", "]"}], " ", "==", " ", 
           RowBox[{
             RowBox[{"t", "[", 
               RowBox[{"n", "/", "2"}], "]"}], " ", "+", " ", "1"}]}], 
         ")"}]}], Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, 
     Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {
     "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
      1.1547071`7.514016829684644, "Messages" -> {}}}, 
     DynamicBox[ToBoxes[
       AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
        Dynamic[Typeset`query$$], 
        Dynamic[Typeset`boxes$$], 
        Dynamic[Typeset`allassumptions$$], 
        Dynamic[Typeset`assumptions$$], 
        Dynamic[Typeset`open$$], 
        Dynamic[Typeset`querystate$$]], StandardForm],
      ImageSizeCache->{261., {8., 18.}},
      TrackedSymbols:>{
       Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
        Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
     DynamicModuleValues:>{},
     UndoTrackedVariables:>{Typeset`open$$}],
    BaseStyle->{"Deploy"},
    DeleteWithContents->True,
    Editable->False,
    SelectWithContents->True], "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{
  3.7912641306162934`*^9, {3.7912646749651337`*^9, 3.7912646768688917`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"86572f62-b72f-46cb-ac74-2716bc326cc4"],

Cell[TextData[StyleBox["\t\tBinary Search Algorithm has the above recurrence \
relation",
 FontFamily->"Times New Roman"]], "Text",
 CellChangeTimes->{{3.791264705519829*^9, 3.7912647282632027`*^9}, {
  3.791264761777643*^9, 
  3.791264762747631*^9}},ExpressionUUID->"d5f5bdac-a82f-4b73-8c56-\
71ec120eaa14"],

Cell[BoxData[
 RowBox[{
  RowBox[{"t", "[", "n_", "]"}], "\[Equal]", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"t", "[", "n", "]"}], "\[Equal]", 
    RowBox[{"1", "+", 
     RowBox[{"t", "[", 
      FractionBox["n", "2"], "]"}]}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.79126468105308*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"e47a5d8f-080f-48ff-b614-d3dd77842ec4"],

Cell[TextData[StyleBox["\t2.3 Solving the key recurrence using Mathematica",
 FontFamily->"Times New Roman",
 FontSize->18,
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.7912647851779613`*^9, 3.7912647986180053`*^9}, 
   3.7912658915177937`*^9},ExpressionUUID->"62806fd6-7603-44da-8747-\
6218821de459"],

Cell[TextData[{
 "\t",
 StyleBox["\tWe have solved the recurrence for Binary Search using the RSolve \
function provided by mathematica.\n\t\tIt takes 4 arguments :recurrence \
equation, value of t[n] for some constant, t[n], n and solves to get explicit \
formulas. ",
  FontFamily->"Times New Roman"]
}], "Text",
 CellChangeTimes->{{3.791264802239623*^9, 
  3.7912648499435678`*^9}},ExpressionUUID->"4f5f0d2a-02b0-47e2-aee2-\
3a26e7a66671"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["LinguisticAssistant",
  DynamicModuleBox[{Typeset`query$$ = 
   "RSolve[{t[n] == t[n/2] + 1, t[1] == 1}, t[n], n]", Typeset`boxes$$ = 
   RowBox[{"RSolve", "[", 
     RowBox[{
       RowBox[{"{", 
         RowBox[{
           RowBox[{
             RowBox[{"t", "[", "n", "]"}], " ", "==", " ", 
             RowBox[{"1", " ", "+", " ", 
               RowBox[{"t", "[", 
                 RowBox[{"n", "/", "2"}], "]"}]}]}], ",", " ", 
           RowBox[{
             RowBox[{"t", "[", "1", "]"}], " ", "==", " ", "1"}]}], "}"}], 
       ",", " ", 
       RowBox[{"t", "[", "n", "]"}], ",", " ", 
       RowBox[{"{", "n", "}"}]}], "]"}], Typeset`allassumptions$$ = {}, 
   Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
   Typeset`querystate$$ = {
   "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
    2.0976039`7.773268475310945, "query.jsp" -> 2.1353595`7.781015994975471, 
    "Messages" -> {}}}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
      Dynamic[Typeset`query$$], 
      Dynamic[Typeset`boxes$$], 
      Dynamic[Typeset`allassumptions$$], 
      Dynamic[Typeset`assumptions$$], 
      Dynamic[Typeset`open$$], 
      Dynamic[Typeset`querystate$$]], StandardForm],
    ImageSizeCache->{413., {8., 18.}},
    TrackedSymbols:>{
     Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
      Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
   DynamicModuleValues:>{},
   UndoTrackedVariables:>{Typeset`open$$}],
  BaseStyle->{"Deploy"},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Input",
 CellChangeTimes->{3.7912648689336185`*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"e0e5fe0a-d596-4abb-a894-476ad2adfb37"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"t", "[", "n", "]"}], "\[Rule]", 
    RowBox[{"1", "+", 
     FractionBox[
      RowBox[{"Log", "[", "n", "]"}], 
      RowBox[{"Log", "[", "2", "]"}]]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.7912648790318027`*^9, 3.791265854658534*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"035f1142-56c6-47db-bf18-d9a82478e52b"]
}, Open  ]],

Cell[TextData[StyleBox["\t2.4 Graph and conclusion",
 FontFamily->"Times New Roman",
 FontSize->18,
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.7912659156509094`*^9, 
  3.7912659206619096`*^9}},ExpressionUUID->"09d64b1f-2437-4e73-9892-\
bea84e241b9b"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["LinguisticAssistant",
  DynamicModuleBox[{Typeset`query$$ = "Plot[Log[n]/Log[2], {n, 0, 100}]", 
   Typeset`boxes$$ = RowBox[{"Plot", "[", 
     RowBox[{
       RowBox[{
         RowBox[{"Log", "[", "n", "]"}], "/", 
         RowBox[{"Log", "[", "2", "]"}]}], ",", " ", 
       RowBox[{"{", 
         RowBox[{"n", ",", " ", "0", ",", " ", "100"}], "}"}]}], "]"}], 
   Typeset`allassumptions$$ = {{
    "type" -> "Function", "word" -> "Log", "template" -> 
     "Assuming \"${word}\" is ${desc1}. Use ${desc2} instead", "count" -> "2",
      "Values" -> {{
       "name" -> "Log", "desc" -> "the natural logarithm", "input" -> 
        "*FunClash.Log-_*Log.Log10-"}, {
       "name" -> "Log10", "desc" -> "the base 10 logarithm", "input" -> 
        "*FunClash.Log-_*Log10.Log-"}}}}, Typeset`assumptions$$ = {}, 
   Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {
   "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
    1.0967323`7.491645627615252, "Messages" -> {}}}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
      Dynamic[Typeset`query$$], 
      Dynamic[Typeset`boxes$$], 
      Dynamic[Typeset`allassumptions$$], 
      Dynamic[Typeset`assumptions$$], 
      Dynamic[Typeset`open$$], 
      Dynamic[Typeset`querystate$$]], StandardForm],
    ImageSizeCache->{302., {8., 18.}},
    TrackedSymbols:>{
     Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
      Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
   DynamicModuleValues:>{},
   UndoTrackedVariables:>{Typeset`open$$}],
  BaseStyle->{"Deploy"},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Input",
 CellChangeTimes->{3.7912659299107933`*^9},
 CellLabel->"In[2]:=",ExpressionUUID->"0ae693df-ab4c-4c39-8464-ca0a8ec916c2"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwV1Hk81IkbB/DBGONqHcPMfFONaPolhZIQfT+KkqPcvkgHTY1I7tpNEduU
HSEikWMqCpVWpGOprFEpktVFbZvt0Noc5Ygas35/PK/P6/3X83z+eQxDdnsJ
FGk02p7p+X/+mSHy2y2Wk//e2Ozo7jdIWshDRvWH5KRV+WJDxsdBMp23ud3I
joaovMKvhn5DZFzIjXifZhoCit18K1nDpOP7qOa6LgU8Whjkapf8mez99Grr
3lElvM2U1cYSo+TTDHFdlg0dj3ZWS6qFo2SrmY1qxX46mAvVX72rGyVroo9f
fqGsDKflgqkg9zHy4KiL3FafAXsECwyix0merP6UzIoJz997LCuyJkhWsWBI
bx8TJR0u1taPJ0gmqeu4+BYToT1WpSztSXIwObJ/01pV1Jv5S5szJslG+jzb
2/5quDfV9FWQ8o0M1sh+lrJXA15SzscYdxnZpmmlSg/WAitfUkKtoqHTVSe/
PVELVZc2eVVTNDxPG+CfPKWFntbcmT2RNLxVPue4+KUWhrdtSawtoOG7jJ1M
BWkjoOPIgaQhGkwGJsYuBOhgakBqMXJcAUfaG976+rGQjGVW9c2KyNAoiOUl
sGAUa/7nlaeKOO6SoNify4KVb0zF8T5FlLQs5iU/YSFqOEaupKGEq40lQZU+
elgofnnhtKcS3l062DnlpQ+WQ36u0XMlrMp0un1uAwfeqYXztbroSHapreiM
5KCvzeRMZy8djcpGObKjHKzYWuOXMkyHbSJtu/dDDiYTlhlVzlDG0rCb6nJn
Lvj+zoE8Z2UYr7bw91tFgGnXGNJWrwzGuMEAfZkBSmlx5XZiBhxrxM/MfAyg
93jb5rETDKTsmrwdGGuAwR1P55w+y8DU389yLv9qgN5WZYuOBgbGO7JtNi6e
Bfme8j/SBhnoq2QeujJ/Npol0W/EHioQmE1qWmjyMK8hf1ayKhNuPYfLOLN5
ML1XJZToMWF5WM+eZsaDx7U4hauGTNBfm0c88uCBmVR/6LoNE6czdrTuOs5D
i65ppWkYE68/dYkqZxoiVHHl4HMpEwEXquVGJnNxoMIm+kOCKtwXCIb11xoj
NJZU0PxNDZPi+Juv/IwxQPDd6FI1nB84dOjsdmMUsTeWjbSpgV5bzl0iMsau
rJSLt1+r4cbKPgd3qTEqM8dsVZTUwfcJz05dPQ9XZ+qb+Turg5YUvXSI5EOk
bTvXqV0dNV374+9b/w9N9l23zO5rYIWOSTU9yRQbF3rHb6yYgR3fsovKKHOY
FuVdlMzRwu6WD0ur3ZfgcG1P4pUWLfwSyJgni7DEMRH/pFSojdC7+7ZbCK2Q
mMcaSxvWxh0Vrmd4gDVWjK4boiJ0YKGdnPcxzhZQvx888V4HW77Ym66PsMOz
NKfuXg9dSIqlBuNHVyJpabhq/U1dXMmw7en0AgSjcxg5s1iIu2HvUeTmgEny
Wqd/LAu3Wss+pwWtgtghQ1vrAQtha20awqjV6M99uHM/Rw+nzlvUhe90xA61
6EfqQj0c+9JwMGqPE97f5+suqdHD+8r4BGHMGtzLe9ptMqKH5jXZ+Skpa/Fk
3bcPqdb6UNjQ3ZuZ7Ix5BZzQ/Hh90ByuKpT+uA6F0qNNs6v1cYQ97t552AW7
a1ub2P36iAoMbRpPdcVYTU33MI+NNwctt5G5bqDPUO4zDWCDlXOyO03ijtS/
nSI2Z7BRrmXy493C9ViUsD/Qq5GNOzFznOZXbcBAUryoeIiNYl6pgb2PB2Zs
z9PWnc1BQ+IkTdjhgfTloTzPdRwYuqp8N/L3xAHFgvMvEjiofbRA/KLLE3lF
/5QTpRykt0yZ84K9kL4v8HbmAw5yYj/u3PLSC2s+RFTRv3CQqDf7h7kB3igP
2Suo5XBRsUC5Ne4vbzgL17uJwAVjRIF7Z5MPPkoZFY3buDhn/uuB4g8+cO+h
n6SLuVgQUrletssX5va/LDxXzUXPuus1vv2+yODOp6k85qLzzE+LyFg/LCpR
1wwZ4eLrFU+7uZ/9ECzEp7MsAvJrMXWiSH/IHSpmFCwl4Gq+xilx1B+yyHzJ
Xh8Cd4PNwsJjKZxm/c5PiiGgEyq8WRRPwfW79XOlWAKbhBLNjj0U2jua9x+Z
9liMbo1lIjX9X/hlx+IIGB8Zn5T9TIH/bIPgTAKB5Jpb6Vl5FES2OhebfyJg
q+Jxue46hX7ezLCpFAIijTTFvpsUxqOEkoOpBB5rN/kQjRTclX9op/9MQGhg
OXGgaXo/oujqhwicsOCscn5AQdby2zv9wwRGgv76o/slha8il0RTMQFs5fI1
X1NQmmX07dK0xdu99pJvKNxqi4+0SCcwN7rZ4Ow7Cr2SY0usjhLwFJ0X7Bqg
8K6vx5zMJHBK/Ka+ZIiCh2mj951p92URap2fKVTcMQlfnTXdpzD9ktU4hYIv
lXvWHiPwsFRKC5ugkHuiKeL+tNnlU16F36bvPRXh55pNIKRqeVmbjAKbXmXZ
Nu1Ll6PG5XIKTzqSVDbkEPgPXd8w4Q==
       "]]},
     Annotation[#, "Charting`Private`Tag$4038#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.9792848906925804},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 100}, {0.9792848906925804, 6.643856160331969}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.791265932800661*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"c0367dc1-05e5-451b-b8fa-33fcfd37125c"]
}, Open  ]],

Cell[TextData[StyleBox["We have used the Plot function to graph the running \
for the Algorithm in question. It plots log(n) [base 2] over n from 0 to 100. \
The x-axis represents the length of the array and the y-axis represents the \
number of iterations the algorithm would take. \n\nConclusion: The binary \
search algorithm is a trivial algorithm to search for an element from a \
dataset. This is a simple algorithm which is effective when the given dataset \
is sorted. Compared to the basic linear search algorithm which has a time \
complexity of O(n), binary search algorithm cuts down the time consumption to \
O(log[n]). This algorithm uses very basic recursion technique to perform the \
search operation.",
 FontFamily->"Times New Roman"]], "Text",
 CellChangeTimes->{{3.7912659870851297`*^9, 
  3.791265994366989*^9}},ExpressionUUID->"959285d9-e0ee-4b22-b0be-\
1c9050bb767a"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.791266028751452*^9, 
  3.791266028998825*^9}},ExpressionUUID->"fd84d97b-7984-47b2-a5cb-\
35c11d1c3d16"],

Cell[TextData[StyleBox["3. Discussion of experiences with Mathematica :",
 FontFamily->"Times New Roman",
 FontSize->24,
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.791266041164111*^9, 
  3.791266058092018*^9}},ExpressionUUID->"a7c60261-2f42-4d90-8d0f-\
f771764d8793"],

Cell[TextData[{
 "\t",
 StyleBox["This was the 1st time we had been using Mathematica and having the \
variety of present tools,it\[CloseCurlyQuote]s nothing less than a wonder. We \
don\[CloseCurlyQuote]t think we could explore it all as it\[CloseCurlyQuote]s \
more than what it appeared to us as new users.\nThough its very useful and \
powerful as a tool,initially we found it difficult to interact with. We \
struggled  figuring out how the functions worked and what were the correct \
arguments to be passed for correct results.\nThe ability of mathematica to \
convert English statements to mathematical functions astonished us.\nFunction \
suggestions helped us execute the necessary statements with ease. The \
in-built options mathematical and other symbol assistants help us document \
the details easily. \nThe WolframLanguage Reference Documentation was a big \
help. It was self-explanatory about all the functions and their variants. ",
  FontFamily->"Times New Roman"]
}], "Text",
 CellChangeTimes->{{3.7912660637816668`*^9, 3.7912662881095963`*^9}, 
   3.7912666325670967`*^9},ExpressionUUID->"037f52a1-8ec3-401c-8279-\
679a6cb392f6"],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{
  3.791266308882431*^9},ExpressionUUID->"4d6a3f8f-4349-41b9-855d-\
fb1e05cf548f"],

Cell[TextData[StyleBox["4. References",
 FontFamily->"Times New Roman",
 FontSize->24,
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.791266313707901*^9, 
  3.791266324006788*^9}},ExpressionUUID->"4e2c0e40-2bb3-4179-9bf5-\
1c33c300c47f"],

Cell[TextData[{
 StyleBox["\t1. ",
  FontFamily->"Times New Roman"],
 StyleBox[ButtonBox["https://reference.wolfram.com/language/",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/"], None},
  ButtonNote->"https://reference.wolfram.com/language/"],
  FontFamily->"Times New Roman"],
 StyleBox["\n\t2. ",
  FontFamily->"Times New Roman"],
 StyleBox[ButtonBox["https://reference.wolfram.com/language/ref/RSolve.html",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/RSolve.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/RSolve.html"],
  FontFamily->"Times New Roman"],
 StyleBox["\n\t3.",
  FontFamily->"Times New Roman"],
 StyleBox[ButtonBox[" https://rosettacode.org/wiki/Binary_search",
  BaseStyle->"Hyperlink",
  ButtonData->{" https://rosettacode.org/wiki/Binary_search", None}],
  FontFamily->"Times New Roman"],
 StyleBox["\t\t\t      \n\t4. ",
  FontFamily->"Times New Roman"],
 StyleBox[ButtonBox["http://rigaux.org/language-study/syntax-across-languages-\
per-language/Mathematica",
  BaseStyle->"Hyperlink",
  ButtonData->{" https://rosettacode.org/wiki/Binary_search", None}],
  FontFamily->"Times New Roman"]
}], "Text",
 CellChangeTimes->{{3.7912663350417523`*^9, 3.7912663395195737`*^9}, {
  3.79126641106748*^9, 3.7912664709229145`*^9}, {3.791266516483298*^9, 
  3.7912665498101673`*^9}},ExpressionUUID->"7352de3c-f919-4c28-ab66-\
8b66dd08aad0"]
},
WindowSize->{766, 772},
WindowMargins->{{Automatic, -7}, {Automatic, 0}},
SpellingDictionaries->{"CorrectWords"->{
 "n\[CloseCurlyQuote]", "k\[CloseCurlyQuote]", "i\[CloseCurlyQuote]", "len", 
  "kth", ". It was selfex", "mathematica"}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]]}, Visible -> False, 
  FrontEndVersion -> "12.0 for Microsoft Windows (64-bit) (April 8, 2019)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 397, 9, 104, "Text",ExpressionUUID->"b9d980c7-b433-4aab-9814-724bc0a6630f"],
Cell[958, 31, 147, 3, 48, "Input",ExpressionUUID->"d3d0a96c-c9a3-4f62-a5c2-d19ba92b72cd"],
Cell[1108, 36, 246, 6, 41, "Text",ExpressionUUID->"23d45cb7-e859-4b07-8347-ea828e299056"],
Cell[1357, 44, 274, 9, 35, "Text",ExpressionUUID->"4c0ddb66-c5fa-448f-b175-bca1c76350a0"],
Cell[1634, 55, 860, 15, 134, "Text",ExpressionUUID->"73ff38c9-cf23-4c60-9417-f8596872b23d"],
Cell[2497, 72, 601, 19, 258, "ExternalLanguage",ExpressionUUID->"6c5d8ba0-f5af-4eb8-b1e6-c8c1b8c3b206"],
Cell[3101, 93, 307, 9, 35, "Text",ExpressionUUID->"56acc8a1-9614-4bd3-b864-2580de2ebcd0"],
Cell[3411, 104, 1791, 33, 262, "Text",ExpressionUUID->"d22290b2-674a-44ef-865f-fd3ba7b9a751"],
Cell[5205, 139, 319, 10, 38, "Text",ExpressionUUID->"1adf52d0-85d3-4bec-8f43-61abf83d92ad"],
Cell[5527, 151, 482, 15, 38, "Text",ExpressionUUID->"b298b07b-629f-4466-ae06-838fd5571919"],
Cell[CellGroupData[{
Cell[6034, 170, 1430, 32, 41, "Input",ExpressionUUID->"d2e55677-aa8d-472d-8847-c8bcfe820b38"],
Cell[7467, 204, 265, 6, 34, "Output",ExpressionUUID->"ce866845-1be6-44af-8934-5ee0d4f903f2"]
}, Open  ]],
Cell[7747, 213, 193, 4, 34, "Text",ExpressionUUID->"2db3b4e8-a797-4eda-a8b4-07ce061a9e61"],
Cell[7943, 219, 2046, 37, 135, "Text",ExpressionUUID->"7aae7313-4e58-4360-8db6-d62a52d4b300"],
Cell[9992, 258, 147, 3, 48, "Input",ExpressionUUID->"1da513f9-2c7b-48f0-a046-2efd420b0801"],
Cell[10142, 263, 269, 9, 35, "Text",ExpressionUUID->"15022b45-5c7d-4922-8d70-4865010e2226"],
Cell[10414, 274, 149, 3, 48, "Input",ExpressionUUID->"f8b0d352-5fe2-424f-ba3f-77e009d011d2"],
Cell[CellGroupData[{
Cell[10588, 281, 55263, 1056, 62, "WolframAlphaShortInput",ExpressionUUID->"f9472488-b1c4-485a-8d1a-5023c7772c13"],
Cell[65854, 1339, 44985, 866, 318, "Output",ExpressionUUID->"fecb72a2-37da-4951-bcba-dbe958fb42ff"]
}, Open  ]],
Cell[110854, 2208, 1015, 15, 172, "Text",ExpressionUUID->"cef34539-bdff-465c-8f9d-1eee2cd146e6"],
Cell[111872, 2225, 173, 3, 48, "Input",ExpressionUUID->"43a1a339-eced-434e-b808-67e2ea4bc634"],
Cell[112048, 2230, 268, 6, 41, "Text",ExpressionUUID->"4e675a0b-2e98-43d2-827c-db6d5369ba00"],
Cell[112319, 2238, 261, 6, 35, "Text",ExpressionUUID->"e3dcbdb0-9353-4f57-b4d9-cb111158160c"],
Cell[112583, 2246, 615, 12, 94, "Text",ExpressionUUID->"13d1225c-5ee8-4532-83f2-83c2bfe730ff"],
Cell[113201, 2260, 556, 20, 273, "ExternalLanguage",ExpressionUUID->"71bdad79-604b-420e-82c5-d2d027ba8fef"],
Cell[113760, 2282, 296, 7, 35, "Text",ExpressionUUID->"d200de8a-cf68-4850-a7e2-589d6d82e038"],
Cell[114059, 2291, 723, 13, 174, "Text",ExpressionUUID->"7860d2a4-6452-4021-84e0-61ce55923d2e"],
Cell[114785, 2306, 1651, 37, 62, "Input",ExpressionUUID->"86572f62-b72f-46cb-ac74-2716bc326cc4"],
Cell[116439, 2345, 308, 6, 32, "Text",ExpressionUUID->"d5f5bdac-a82f-4b73-8c56-71ec120eaa14"],
Cell[116750, 2353, 371, 10, 47, "Output",ExpressionUUID->"e47a5d8f-080f-48ff-b614-d3dd77842ec4"],
Cell[117124, 2365, 309, 6, 35, "Text",ExpressionUUID->"62806fd6-7603-44da-8747-6218821de459"],
Cell[117436, 2373, 442, 10, 74, "Text",ExpressionUUID->"4f5f0d2a-02b0-47e2-aee2-3a26e7a66671"],
Cell[CellGroupData[{
Cell[117903, 2387, 1765, 42, 41, "Input",ExpressionUUID->"e0e5fe0a-d596-4abb-a894-476ad2adfb37"],
Cell[119671, 2431, 394, 10, 53, "Output",ExpressionUUID->"035f1142-56c6-47db-bf18-d9a82478e52b"]
}, Open  ]],
Cell[120080, 2444, 260, 6, 35, "Text",ExpressionUUID->"09d64b1f-2437-4e73-9892-bea84e241b9b"],
Cell[CellGroupData[{
Cell[120365, 2454, 1826, 40, 41, "Input",ExpressionUUID->"0ae693df-ab4c-4c39-8464-ca0a8ec916c2"],
Cell[122194, 2496, 4394, 91, 243, "Output",ExpressionUUID->"c0367dc1-05e5-451b-b8fa-33fcfd37125c"]
}, Open  ]],
Cell[126603, 2590, 890, 13, 172, "Text",ExpressionUUID->"959285d9-e0ee-4b22-b0be-1c9050bb767a"],
Cell[127496, 2605, 206, 4, 67, "Input",ExpressionUUID->"fd84d97b-7984-47b2-a5cb-35c11d1c3d16"],
Cell[127705, 2611, 277, 6, 41, "Text",ExpressionUUID->"a7c60261-2f42-4d90-8d0f-f771764d8793"],
Cell[127985, 2619, 1151, 18, 194, "Text",ExpressionUUID->"037f52a1-8ec3-401c-8279-679a6cb392f6"],
Cell[129139, 2639, 147, 3, 48, "Input",ExpressionUUID->"4d6a3f8f-4349-41b9-855d-fb1e05cf548f"],
Cell[129289, 2644, 243, 6, 41, "Text",ExpressionUUID->"4e2c0e40-2bb3-4179-9bf5-1c33c300c47f"],
Cell[129535, 2652, 1474, 34, 92, "Text",ExpressionUUID->"7352de3c-f919-4c28-ab66-8b66dd08aad0"]
}
]
*)

